(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{320:function(t,a,e){"use strict";e.r(a);var i=e(0),r=Object(i.a)({},function(){var t=this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"react-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-diff","aria-hidden":"true"}},[t._v("#")]),t._v(" React diff")]),e("h3",{attrs:{id:"为什么虚拟dom会提高性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么虚拟dom会提高性能","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么虚拟dom会提高性能?")]),e("p",[t._v("虚拟dom相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能。")]),e("p",[t._v("步骤：")]),e("ol",[e("li",[t._v("用JavaScript对象结构表示DOM树的结构，然后用这个数构建真正的dom树，插入到文档中；")]),e("li",[t._v("当状态变更的时候，重新构造一颗新的对象树，然后新的树和旧的树进行对比，记录两棵树之间的差异；")]),e("li",[t._v("把记录的差异应用到DOM树上，视图就更新了；")])]),e("blockquote",[e("p",[t._v("AST抽象语法树")])]),e("h3",{attrs:{id:"diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff算法","aria-hidden":"true"}},[t._v("#")]),t._v(" diff算法?")]),e("ol",[e("li",[t._v("把树形结构按照层级分解，只比较同级元素")]),e("li",[t._v("给列表结构的每个单元添加唯一的key属性，方便比较")]),e("li",[t._v("react只会匹配相同组件")]),e("li",[t._v("合并操作，在setState方法的时候，react将其标记为dirty，到每一个事件循环结束，react检查所有标记dirty的组件，进行重新绘制")]),e("li",[t._v("选择性子树渲染，shouldComponentUpdate,提高diff的性能")])])])}],!1,null,null,null);a.default=r.exports}}]);