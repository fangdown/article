(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{192:function(e,a,l){"use strict";l.r(a);var t=l(0),i=Object(t.a)({},function(){var e=this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("div",{staticClass:"content"},[l("h2",{attrs:{id:"webpack性能调优"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#webpack性能调优","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack性能调优")]),l("blockquote",[l("p",[e._v("主流工具webpack 打包压缩")])]),l("h3",{attrs:{id:"性能优化-网络-webpack优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#性能优化-网络-webpack优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 性能优化-网络-webpack优化")]),l("p",[e._v("###. 提升构建速度")]),l("ol",[l("li",[e._v("babel-loader")])]),l("ul",[l("li",[e._v("使用babel-loader")]),l("li",[e._v("开启缓存将转译结果缓存至文件系统loader: 'babel-loader?cacheDirectory=true'")]),l("li",[e._v("用 include 或 exclude 来帮我们避免不必要的转译")])]),l("ol",{attrs:{start:"2"}},[l("li",[e._v("第三方库\n用 DllPlugin 处理文件，这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。")])]),l("ul",[l("li",[e._v("基于 dll 专属的配置文件，打包 dll 库")]),l("li",[e._v("基于 webpack.config.js 文件，打包业务代码")])]),l("ol",{attrs:{start:"3"}},[l("li",[e._v("Happypack——将 loader 由单进程转为多进程")])]),l("ul",[l("li",[e._v("loader: 'happypack/loader?id=happyBabel'")])]),l("ol",{attrs:{start:"4"}},[l("li",[e._v("删除冗余代码")])]),l("ul",[l("li",[e._v("Tree-Shaking")]),l("li",[e._v("UglifyJsPlugin")]),l("li",[e._v("optimization.minimize")])]),l("ol",{attrs:{start:"5"}},[l("li",[e._v("按需加载")])]),l("ul",[l("li",[e._v("一次不加载完所有的文件内容，只加载此刻需要用到的那部分（会提前做拆分）")]),l("li",[e._v("当需要更多内容时，再对用到的内容进行即时加载")])]),l("blockquote",[l("p",[e._v("核心代码：require.ensure(dependencies, callback, chunkName)")])]),l("p",[e._v("按需加载有两种模式；一种是 require.ensure；另一种是 ecmascript 定义的动态 import")]),l("ol",{attrs:{start:"6"}},[l("li",[e._v("gzip压缩\n原理：gzip使用deflate技术压缩，比deflate压缩量大一点，deflate压缩成本小一点")])])])}],!1,null,null,null);a.default=i.exports}}]);