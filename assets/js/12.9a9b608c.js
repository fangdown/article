(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{193:function(n,s,a){"use strict";a.r(s);var t=a(0),p=Object(t.a)({},function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("div",{staticClass:"content"},[n._ssrNode('<h3 id="概况"><a href="#概况" aria-hidden="true" class="header-anchor">#</a> \b概况</h3><p>前端数据交互从\b早起的ajax、jQuery的ajax，到后面的\bPromise、axios、fetch。有时候分不清它们的关系\b，容易混淆概念，为弄清楚这些相互紧密的技术或对象，整理此文！</p><h3 id="一句话认识"><a href="#一句话认识" aria-hidden="true" class="header-anchor">#</a> 一句话认识</h3>'),n._ssrNode("<ol>","</ol>",[n._ssrNode("<li>ajax 是使用 XmlHttpRequest 异步获取资源的技术，职责未分离，容易产生回调地狱。</li><li>Promise 是可以把异步操作以同步操作的流程表达出来的一种形式或者一种解决方案，本质是 javascript 的一个对象（构造函数）。</li>"),n._ssrNode("<li>","</li>",[n._ssrNode('<a href="https:/www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener noreferrer">',"</a>",[n._ssrNode("axios 是一个使用XmlHttpRequest和Promise的为浏览器和Node.js设计的HTTP库"),a("OutboundLink")],2)]),n._ssrNode("<li>fetch 是一种新的采用Promise方式的职责分离的异步获取资源的技术（新技术，\b需兼容）</li>")],2),n._ssrNode('<h3 id="发展历程"><a href="#发展历程" aria-hidden="true" class="header-anchor">#</a> 发展历程</h3><p>ajax---&gt;jqueryAjax---&gt;Promise---&gt;axios---&gt;fecth(不一定正确，从使用上可以这么理解吧)</p><h3 id="区别"><a href="#区别" aria-hidden="true" class="header-anchor">#</a> 区别</h3><ol><li>ajax 和 fetch 属于同一类属性，是异步获取数据的技术，fecth是下一代的新技术，\b 需要兼容性支持</li><li>promsie 本身是 javascript 对象，是一种解决方案，含有 3 个状态 pending(进行中)、fulfilled（已成功）、rejected（已失败），是axios和fetch的帮手</li><li>axios 本质上是创建 XmlHttpRequest，兼容性会好，在回调方面采用了\bPromise,\b避免了回调地狱。</li><li>fecth 引用了 Promise,支持 \basync await。</li><li>IE天生不支持Promise,所以在I\bE上使用axios或fetch需要引入polyfill</li></ol><h3 id="上图理解"><a href="#上图理解" aria-hidden="true" class="header-anchor">#</a> 上图理解</h3><p><img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-145016@2x.jpg" alt="ajax fetch区别" title="ajax fetch区别"></p><p>你现在对ajax \bPromise axios fetch有了一定的了解了吗？</p><h3 id="错误回调处理"><a href="#错误回调处理" aria-hidden="true" class="header-anchor">#</a> \b 错误回调处理</h3><h4 id="现状"><a href="#现状" aria-hidden="true" class="header-anchor">#</a> 现状</h4><p>现在前端项目中基本使用ajax、axios和fetch来获取异步数据，基本使用方法及参数我就不做过多描述。<br>\n这里主要讲的是面对4xx、5xx错误、网络错误的情况下，使用ajax、axios和fetch \b怎么\b样进行错误处理。<br><strong></strong></p><h4 id="经典案例"><a href="#经典案例" aria-hidden="true" class="header-anchor">#</a> 经典案例</h4><p>在发请求前有\b设置加载动画，在请求完成后，关闭加载动画！<br>\n可能有些同学是在成功回调里设置了关闭加载动画，但是如果请求失败，\b那么加载动画\b会一直在运行。\n</p><h4 id="方案"><a href="#方案" aria-hidden="true" class="header-anchor">#</a> 方案</h4><ol><li>采用koa2搭建后台，可以设置请求返回码，测试4xx、5xx情况；</li><li>利用Chrome的Network设置无网络，测试网络错误情况（Network offline）；</li><li>依次观察原生ajax、jQuery-ajax、axios、fetch的错误表现；</li></ol><h5 id="后台服务"><a href="#后台服务" aria-hidden="true" class="header-anchor">#</a> 后台服务</h5><div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token keyword">const</span> fs  <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa-router\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa2-cors\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">\'列表页\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">/</span> 测试服务端<span class="token number">4</span>xx\n<span class="token keyword">const</span> <span class="token function-variable function">page404</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">\'页面未找到\'</span>\n<span class="token punctuation">}</span>\n<span class="token operator">/</span> 测试服务端<span class="token number">5</span>xx\n<span class="token keyword">const</span> <span class="token function-variable function">page500</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nrouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> main<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/list\'</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/404\'</span><span class="token punctuation">,</span> page404<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/500\'</span><span class="token punctuation">,</span> page500<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="前端用例"><a href="#前端用例" aria-hidden="true" class="header-anchor">#</a> 前端用例</h4><ol><li>生成4个按钮，相对应原生ajax、jQueryAjax、\baxios、fetch事件\b方法\n<img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-153340.jpg" alt></li></ol><div class="language-javascript extra-class"><pre class="language-javascript"><code><span class="token comment">// react 构建demo</span>\n<span class="token function-variable function">commonSendBefore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function-variable function">commonCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 原生ajax</span>\nonClick1 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonSendBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'success\'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error-ajax\'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// jqueryAjax</span>\nonClick2 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonSendBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    method<span class="token punctuation">:</span> <span class="token string">\'GET\'</span><span class="token punctuation">,</span>\n    <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'success\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    error<span class="token punctuation">:</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error-jquery-ajax\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// axios</span>\nonClick3 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonSendBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'success\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// console.log(\'error-axios\', err.response);可以看到status</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'err-axios\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// fetch</span>\nonClick4 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonSendBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'success-fetch\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error-fetch\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commonCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><ol start="2"><li>测试4xx错误\n<img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-160724@2x.jpg" alt>\n原生ajax和jQueryAjax 几乎\b一致，返回一个xhr对象，axios也是返回一个错误Error；<br>\n但是fetch却截然不同，在success回调里返回相关信息；\n测试\b结果\b：ajax、jQueryAjax、axios错误回调执行，加载动画消失，\bfetch错误回调\b未执行，加载动画依然存在。</li><li>测试5xx错误\n<img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-161324@2x.jpg" alt>\n原生ajax和jQueryAjax 几乎\b一致，返回一个xhr对象，axios也是返回一个错误Error；<br>\n但是fetch却截然不同，在success回调里返回相关信息；\n测试\b结果\b：ajax、jQueryAjax、axios错误回调执行，加载动画消失，\bfetch错误回调\b未执行，加载动画依然存在。(同4xx错误一样)</li><li>\b测试网络错误\n<img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-161657@2x.jpg" alt>\n原生ajax和jQueryAjax 几乎\b一致，返回一个xhr对象，axios也是返回一个错误Error，fetch错误回调执行；\n测试\b结果\b：ajax、jQueryAjax、axios、fetch错误回调执行，加载动画消失。(同4xx错误一样)</li></ol><p>综上测试可以得出以下：</p><ol><li>4\bxx、5xx错误\najax、jqueryAjax可以直接通过返回的对象中的status进行错误类型判断；\n\baxios可以通过error.response中的status进行错误类型判断；\nfetch\b可以通过\b返回的对象的status进行错误类型判断；</li><li>网络错误<br>\najax、jqueryAjax可以直接通过返回的对象中的status是否为0进行判断；\n\baxios可以通过error.response是否为undefined进行错误类型判断；\nfetch在catch中直接判断；\n\b<strong>\najax、jqueryAjax、axios需要在错误回调中分析status码进行区别判断；\nfetch\b\b中的catch处理网络错误，服务端错误需要在成功回调中根据status进行判断。\n</strong></li></ol><h3 id="思维导图"><a href="#思维导图" aria-hidden="true" class="header-anchor">#</a> 思维导图</h3>'),n._ssrNode("<p>","</p>",[n._ssrNode('<img src="%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E4%BA%A4%EF%BC%88ajax-axios-fetch%EF%BC%89%E5%8F%8A%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%E5%A4%84%E7%90%86/Jietu20180515-204251.jpg" alt>\n###参考<br>'),n._ssrNode('<a href="https:/blog.csdn.net/u011413061/article/details/51932295" target="_blank" rel="noopener noreferrer">',"</a>",[n._ssrNode("fetch和XmlHttpRequest讲解"),a("OutboundLink")],2)],2)],2)},[],!1,null,null,null);s.default=p.exports}}]);